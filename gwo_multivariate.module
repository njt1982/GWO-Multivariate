<?php

// Reference point for the GWO Feed URL
define(GOOGLE_API_URL, 'https://www.google.com/analytics/feeds/websiteoptimizer/experiments');


/**
 * Implementation of hook_menu().
 */
function gwo_multivariate_menu() {
  $items = array();

  $items['admin/settings/gwo-multivariate'] = array(
    'title' => 'GWO MultiVariate',
    'description' => 'Configure the Multivariate tests on this site',
    'page callback' => 'gwo_multivariate_admin_overview',
    'access arguments' => array('administer site'),
    'file' => 'gwo_multivariate.admin.inc',
  );

  $items['admin/settings/gwo-multivariate/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/settings/gwo-multivariate/add'] = array(
    'title' => 'Add',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gwo_multivariate_admin_experiment_form'),
    'access arguments' => array('administer site'),
    'file' => 'gwo_multivariate.admin.inc',
  );

  $items['admin/settings/gwo-multivariate/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gwo_multivariate_admin_settings_form'),
    'access arguments' => array('administer site'),
    'file' => 'gwo_multivariate.admin.inc',
  );

  $items['admin/settings/gwo-multivariate/edit/%gwo_multivariate'] = array(
    'title' => 'Edit',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gwo_multivariate_admin_experiment_form', 4),
    'access arguments' => array('administer site'),
    'file' => 'gwo_multivariate.admin.inc',
  );

  $items['admin/settings/gwo-multivariate/delete/%gwo_multivariate'] = array(
    'title' => 'Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gwo_multivariate_admin_delete_confirm', 4),
    'access arguments' => array('administer site'),
    'file' => 'gwo_multivariate.admin.inc',
  );

  return $items;
}


/**
 * Internal load function for a Google Website Optimizer experiment via the API
 */
function gwo_multivariate_load($id, $flush = FALSE) {
  static $cache = NULL;
  if (!$cache) {
    $cache = gwo_multivariate_build_experiments();
  }

  if (isset($cache[$id])) {
    return $cache[$id];
  }

  return FALSE;
}


/**
 * Implementation of hook_init().
 */
function gwo_multivariate_init() {
  // Get the experiments and for each one which matches this page, insert the control script into the header
  $experiments = gwo_multivariate_build_experiments();
  $url = url($_GET['q'], array('absolute' => TRUE));

  foreach ($experiments as $e) {
    if ($e->link['gwo:testUrl'] == $url) {
      drupal_set_html_head($e->controlScript);
    }
  }
}


/**
 * Implementation of hook_footer().
 */
function gwo_multivariate_footer() {
  $output = array();

  // Get the experiments and for each one which matches this page, insert the tracking or conversion script
  $experiments = gwo_multivariate_build_experiments();
  $url = url($_GET['q'], array('absolute' => TRUE));

  foreach ($experiments as $e) {
    if ($e->link['gwo:testUrl'] == $url) {
      $output[] = $e->trackingScript;
    }
    if ($e->link['gwo:goalUrl'] == $url) {
      $output[] = $e->conversionScript;
    }
  }

  return implode("\n\n", $output);
}


function gwo_multivariate_preprocess_block(&$vars) {
  $key = $vars['block']->module .'-'. $vars['block']->delta;

  $experiments = gwo_multivariate_build_experiments();
  $url = url($_GET['q'], array('absolute' => TRUE));

  foreach ($experiments as $e) {
    if ($e->link['gwo:testUrl'] == $url) {
      foreach($e->sections as $s) {
        if ($s->title == $key) {
          $vars['block']->content = '<script>utmx_section("block-'. $key .'")</script>'. $vars['block']->content .'</noscript>';
        }
      }
    }
  }
}


function gwo_multivariate_preprocess_content_field(&$vars) {
  //$test = gwo_multivariate_get_settings_for_path($_GET['q'], 'test');
  if (!$test) return;

  $key = $vars['field_name'];

  if ($test->variable_items['content'][$key]) {
    $vars['items'][0]['view'] = '<script>utmx_section("content-'. $key .'")</script>'. $vars['items'][0]['view'] .'</noscript>';
  }
}


/**
 *
 */
function gwo_multivariate_build_experiments($rebuild = FALSE) {
  static $experiments = NULL;

  if ($experiments) {
    return $experiments;
  }

  if (!$rebuild && ($cache = cache_get('gwo_multivariate'))) {
    $experiments = $cache->data;
  }
  else {
    $experiments = array();
    // Get the configured google account ID. If none set, don't go any further
    $account_id = variable_get('gwo_multivariate_account_id', 0);
    if ($account_id == 0) {
      return array();
    }

    // Pull an experiment summary from the API
    $res = oauth_google_request();

    // If the code isn't 200 (OK) then output an error
    if ($res->code != 200) {
      watchdog('gwo_multivariate', 'Error getting experiment list from Google. %code: %msg', array('%code' => $res->code, '%msg' => $res->status_message), WATCHDOG_ERROR);
      return array();
    }

    // Convert the data from JSOM to a PHP object
    $obj = json_decode($res->data);

    // Loop over the entries
    foreach ($obj->feed->entry as $experiment) {
      // The request pulls ALL experiments the API can access - this line only shows ones for the specific account ID
      if ($account_id != $experiment->{'gwo$analyticsAccountId'}->{'$t'}) continue;
      
      // Grab the ID from the summary
      $id = (int)$experiment->{'gwo$experimentId'}->{'$t'};

      // Get the detailed info about this experiment
      $r = oauth_google_request(array('url' => GOOGLE_API_URL .'/'. $id));
      $r = json_decode($r->data);

      // Build an experiment object from the above
      $e = gwo_multivariate_parse_entry($r->entry);

      // If there are any sections, load them up
      if ($e->numSections > 0) {
        $e->sections = array();

        // Get the detailed info about this experiment's sections
        $r = oauth_google_request(array('url' => GOOGLE_API_URL ."/{$id}/sections"));
        $r = json_decode($r->data);

        // For each section, built it into the experiment object
        foreach ($r->feed->entry as $section) {
          $s = gwo_multivariate_parse_entry($section);

          $e->sections[$s->sectionId] = $s;
        }
      }

      // Store the experiment
      $experiments[$id] = $e;
    }
    
    // Cache these experiments
    cache_set('gwo_multivariate', $experiments);
  }

  //dpm($experiments);
  // Return them
  return $experiments;
}



function gwo_multivariate_parse_entry($entry) {
  $e = new stdClass();

  foreach ($entry as $key => $value) {
    // We need to handle different keys in different ways
    // ignore xmlns ones - not sure why we need them in a JSON response
    if (substr($key, 0, 5) == 'xmlns') {
      continue;
    }
    // Store the etag - handy for editing
    elseif ($key == 'gd$etag') {
      $e->etag = $value;
    }
    // Anything beginning gwo or app should be processed as follows - mainly
    elseif (substr($key, 0, 4) == 'gwo$' || substr($key, 0, 4) == 'app$') {
      // strip the gwo and app nameSpace off for ease of use
      $key = substr($key, 4);

      // Script elements shouldn't be check_plain'd
      if (substr($key, -6) == 'Script') {
        $e->{$key} = $value->{'$t'};
      }
      else {
        $e->{$key} = check_plain($value->{'$t'});
      }
    }
    // Links should be looped over and have their "rel" elements stored
    elseif ($key == 'link') {
      $e->link = array();
      foreach ($value as $l) {
        $e->link[$l->rel] = $l->href;
      }
    }
    // anything with a $t element should be check_plain'd
    elseif (isset($value->{'$t'})) {
      $e->{$key} = check_plain($value->{'$t'});
    }
    // Otherwise just check_plain the value
    else {
      $e->{$key} = check_plain($value);
    }
  }

  return $e;
}
